// Generated by CoffeeScript 1.3.3
(function() {
  var parseInfo;

  parseInfo = function(friend) {
    var k, parser, v;
    parser = {
      clues: [],
      gender: function(i) {
        return parser.clues.push({
          type: 'gender',
          phrase: "The suspect was " + i
        });
      },
      birthday: function(i) {
        var phrase, today, year, year_regex, years;
        phrase = '';
        year_regex = /\d\d\/\d\d\/\d\d\d\d/;
        if (i.match(year_regex)) {
          today = new Date;
          year = i.match(/\d\d\d\d/)[0];
          years = today.getFullYear() - parseInt(year);
          phrase = "He was " + years + " years old";
        } else {
          phrase = "He was born on " + i;
        }
        return parser.clues.push({
          type: 'birthday',
          phrase: phrase
        });
      },
      hometown: function(i) {
        return parser.clues.push({
          type: 'hometown',
          phrase: "He was born in " + i.name
        });
      },
      location: function(i) {
        return parser.clues.push({
          type: 'location',
          phrase: "He lives in " + i.name
        });
      },
      significant_other: function(i) {
        return parser.clues.push({
          type: 'In a relationship with',
          phrase: "He showed me a few photos from " + i.name
        });
      },
      quotes: function(i) {
        return parser.clues.push({
          type: 'quotes',
          phrase: "He left this: '" + i + "'"
        });
      },
      political: function(i) {
        return parser.clues.push({
          type: 'political',
          phrase: "He has a " + i + " political view"
        });
      },
      religion: function(i) {
        return parser.clues.push({
          type: 'religion',
          phrase: "He believes in the " + i + " religion"
        });
      },
      education: function(i) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          item = i[_i];
          _results.push(parser.clues.push({
            type: 'education',
            phrase: "He has studied at " + item.school.name
          }));
        }
        return _results;
      },
      work: function(i) {
        var job, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          job = i[_i];
          parser.clues.push({
            type: 'work',
            phrase: "He has worked at " + job.employer.name
          });
          if (job.position) {
            _results.push(parser.clues.push({
              type: 'position',
              phrase: "He has worked as " + job.position.name
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      language: function(i) {
        var lang, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          lang = i[_i];
          _results.push(parser.clues.push({
            type: 'language',
            phrase: "I head he speaking " + lang.name
          }));
        }
        return _results;
      },
      sports: function(i) {
        var sport, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          sport = i[_i];
          _results.push(parser.clues.push({
            type: 'sports',
            phrase: "He had invited me to play " + sport.name
          }));
        }
        return _results;
      },
      favorite_teams: function(i) {
        var team, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          team = i[_i];
          _results.push(parser.clues.push({
            type: 'favorite teams',
            phrase: "He was wearing a " + team.name + " shirt"
          }));
        }
        return _results;
      },
      favorite_athletes: function(i) {
        var athlete, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = i.length; _i < _len; _i++) {
          athlete = i[_i];
          _results.push(parser.clues.push({
            type: 'favorite athletes',
            phrase: "He has an autograph from " + athlete.name
          }));
        }
        return _results;
      },
      relationship_status: function(i) {
        var status;
        status = '';
        switch (i) {
          case 'Single':
            status = "He looks single";
            break;
          case 'In a relationship':
            status = "I think he's dating someone";
            break;
          case 'Engaged':
            status = "He had a ring on his left hand";
            break;
          case 'Married':
            status = "He had a ring on his right hand";
            break;
          case 'It\'s complidated':
            status = "He seems to be in a complicated relationship";
            break;
          case 'In a open relationship':
            status = "He is in a open relationship. If you know what I mean";
            break;
          case 'Widowed':
            status = "He said being widowed";
            break;
          case 'Separated':
            status = "He is separated";
            break;
          case 'Divorced':
            status = "He is divorced";
        }
        return parser.clues.push({
          type: 'relationship status',
          phrase: status
        });
      }
    };
    for (k in friend) {
      v = friend[k];
      if (parser.hasOwnProperty(k)) {
        parser[k](v);
      }
    }
    return parser.clues;
  };

  exports.addClues = function(friend, callback) {
    var clues;
    clues = parseInfo(friend);
    friend = {
      uid: friend.uid,
      name: friend.name,
      clues: clues
    };
    return callback(friend);
  };

}).call(this);
