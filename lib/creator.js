// Generated by CoffeeScript 1.3.3
(function() {
  var addClues, addWorld, build, createCorrectPath, createWrongPath, getFriendClues, getMissions, getWorlds, setFirstWorld, setMission;

  Array.prototype.shuffle = function() {
    return this.sort(function() {
      return 0.5 - Math.random();
    });
  };

  getMissions = function(json) {
    return json.shuffle();
  };

  getFriendClues = function(json) {
    return json.shuffle();
  };

  setMission = function(missions) {
    var mission;
    mission = missions.pop();
    mission.worlds = [];
    return mission;
  };

  getWorlds = function(missions) {
    return missions.worlds = missions.map(function(mission) {
      return mission.world;
    });
  };

  addWorld = function(mission, world) {
    return mission.worlds.push(world);
  };

  build = function(mission) {
    var world, _i, _len, _ref;
    mission.worlds.shuffle();
    _ref = mission.worlds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      world = _ref[_i];
      delete world.clues;
    }
    delete mission.build;
    return mission;
  };

  addClues = function(_arg) {
    var clues, previous_world, world;
    clues = _arg.clues, world = _arg.world, previous_world = _arg.previous_world;
    world.friend_clue = clues.pop();
    return world.world_clues = previous_world.clues.shuffle();
  };

  setFirstWorld = function(mission, clues, previous_world) {
    var world;
    world = mission.world;
    delete mission.world;
    addClues({
      clues: clues,
      world: world,
      previous_world: previous_world
    });
    world.level = 0;
    return addWorld(mission, world);
  };

  createCorrectPath = function(_arg) {
    var clues, final_world, levels, mission, missions, previous_world, world;
    missions = _arg.missions, mission = _arg.mission, clues = _arg.clues, levels = _arg.levels;
    previous_world = void 0;
    final_world = true;
    while (levels > 0) {
      world = missions.worlds.pop();
      world.level = levels;
      if (!final_world) {
        addClues({
          clues: clues,
          world: world,
          previous_world: previous_world
        });
      }
      final_world = false;
      previous_world = world;
      addWorld(mission, world);
      levels -= 1;
    }
    return setFirstWorld(mission, clues, previous_world);
  };

  createWrongPath = function(_arg) {
    var levels, mission, missions, times, world, _results;
    missions = _arg.missions, mission = _arg.mission, levels = _arg.levels;
    _results = [];
    while (levels > 0) {
      times = 2;
      while (times > 0) {
        world = missions.worlds.pop();
        world.level = levels;
        addWorld(mission, world);
        times -= 1;
      }
      _results.push(levels -= 1);
    }
    return _results;
  };

  exports.createMission = function(_arg) {
    var clues, levels, mission, missions;
    levels = _arg.levels, missions = _arg.missions, clues = _arg.clues;
    missions = getMissions(missions);
    mission = setMission(missions);
    getWorlds(missions);
    clues = getFriendClues(clues);
    createCorrectPath({
      missions: missions,
      mission: mission,
      clues: clues,
      levels: levels
    });
    createWrongPath({
      missions: missions,
      mission: mission,
      levels: levels
    });
    return build(mission);
  };

}).call(this);
