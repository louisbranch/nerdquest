// Generated by CoffeeScript 1.3.3
(function() {

  Nerd.Quest = Backbone.RelationalModel.extend({
    relations: [
      {
        type: Backbone.HasMany,
        key: 'worlds',
        relatedModel: 'Nerd.World',
        collectionType: 'Nerd.Worlds',
        reverseRelation: {
          key: 'quest'
        }
      }, {
        type: Backbone.HasMany,
        key: 'suspects',
        relatedModel: 'Nerd.Suspect',
        collectionType: 'Nerd.Suspects',
        reverseRelation: {
          key: 'quest'
        }
      }
    ],
    progress: function() {
      var counter, timer,
        _this = this;
      counter = 0;
      return timer = setInterval(function() {
        _this.trigger('progress', counter);
        counter += 0.1;
        if (counter > 100) {
          return clearInterval(timer);
        }
      }, 50);
    },
    start: function(callback) {
      this.set('timerStart', new Date());
      this.progress();
      return this.get('worlds').start(callback);
    },
    finish: function() {
      this.set('timerEnd', new Date());
      delete this.progress;
      this.duration();
      return this.trigger('finished');
    },
    increaseScore: function(n) {
      var multiplier, newScore;
      multiplier = this.get('scoreMultiplier');
      newScore = this.get('score') + (n * multiplier);
      this.set('score', newScore);
      this.set('scoreMultiplier', multiplier + 1);
      return this.trigger('updateScore', newScore);
    },
    decreaseScore: function(n) {
      var multiplier;
      multiplier = this.get('scoreMultiplier');
      if (multiplier !== 0) {
        return this.set('scoreMultiplier', multiplier - 1);
      }
    },
    scoreRightWorld: function(level, callback) {
      var nextWorlds;
      this.increaseScore(300);
      this.set('rightWorlds', this.get('rightWorlds') + 1);
      nextWorlds = this.get('worlds').worldsByLevel(level + 1);
      if (nextWorlds.length === 0) {
        return this.trigger('finalLevel');
      } else {
        return callback(null, {
          nextWorlds: nextWorlds
        });
      }
    },
    scoreWrongWorld: function() {
      this.decreaseScore(800);
      return this.set('wrongWorlds', this.get('wrongWorlds') + 1);
    },
    scoreRightSuspect: function() {
      return this.increaseScore(1000);
    },
    scoreWrongSuspect: function() {
      return this.increaseScore(2500);
    },
    useClue: function() {
      this.decreaseScore(300);
      return this.set('usedClues', this.get('usedClues') + 1);
    },
    duration: function() {
      var minutes, seconds, time;
      time = this.get('timerEnd') - this.get('timerStart');
      seconds = parseInt(time / 1000);
      minutes = parseInt(time / 1000 / 60);
      return this.set('duration', "" + minutes + ":" + seconds);
    }
  });

  Nerd.Quests = Backbone.Collection.extend({
    model: Nerd.Quest,
    url: '/quests'
  });

}).call(this);
